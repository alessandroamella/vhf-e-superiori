<!DOCTYPE html>
<html>
    <head>
        <title>QSO Map Export</title>
        <link
            rel="stylesheet"
            href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
            integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
            crossorigin=""
        />

        <style>
            body {
                margin: 0;
                padding: 0;
            }
            #map {
                width: 1080px;
                height: 1080px;
            }

            /* Event name on top left */
            .event-container {
                position: absolute;
                left: 16px;
                top: 16px;
                z-index: 1000;
            }

            .event-box {
                background: rgba(255, 255, 255, 0.75);
                padding: 12px 24px; /* Increased padding by 1.5x */
                border-radius: 12px; /* Increased border-radius by 1.5x */
                border-left: 6px solid #ef4444; /* Increased border thickness by 1.5x */
            }

            .event-name {
                margin: 0;
                color: #222;
                font-family: "Inter", sans-serif;
                font-weight: bold;
                font-size: 1.875rem; /* Increased font-size by 1.5x */
            }

            .event-date {
                margin: 0;
                color: #222;
                font-family: "Inter", sans-serif;
                font-weight: 300;
                font-size: 1.5rem; /* Increased font-size by 1.5x */
            }

            /* User profile at bottom */
            .user-container {
                position: absolute;
                left: 16px;
                bottom: 16px;
                z-index: 1000;
                display: flex;
                align-items: center;
                background: rgba(255, 255, 255, 0.75);
                padding: 12px; /* Increased padding by 1.5x */
                border-radius: 12px; /* Increased border-radius by 1.5x */
            }

            .profile-pic {
                width: 72px; /* Increased width by 1.5x */
                height: 72px; /* Increased height by 1.5x */
                border-radius: 50%;
                border: 4.5px solid #ef4444; /* Increased border thickness by 1.5x */
                object-fit: cover;
                margin-right: 18px; /* Increased margin-right by 1.5x */
            }

            .background-box {
                position: absolute;
                z-index: 0;
                top: 21px; /* Increased top by 1.5x */
                bottom: 21px; /* Increased bottom by 1.5x */
                left: 24px; /* Increased left by 1.5x */
                right: -3px; /* Increased right by 1.5x */
                border-radius: 18px; /* Increased border-radius by 1.5x */
                background: rgba(255, 255, 255, 0.75);
            }

            .callsign {
                color: #222;
                font-family: "Inter", sans-serif;
                font-weight: bold;
                font-size: 1.875rem; /* Increased font-size by 1.5x */
                margin: 0;
                text-transform: uppercase;
                border-bottom: 6px solid #ef4444; /* Increased border thickness by 1.5x */
                padding-bottom: 3px; /* Increased padding-bottom by 1.5x */
            }

            /* Website branding */
            .website-container {
                position: absolute;
                right: 16px;
                bottom: 16px;
                z-index: 1000;
                display: flex;
                align-items: center;
                padding: 12px 18px; /* Increased padding by 1.5x */
                border-radius: 12px; /* Increased border-radius by 1.5x */
            }

            .logo {
                width: 72px; /* Increased width by 1.5x */
                height: 72px; /* Increased height by 1.5x */
                z-index: 50;
                margin-right: 12px; /* Increased margin-right by 1.5x */
            }

            .website-text {
                z-index: 50;
                color: #ef4444;
                font-family: "Inter", sans-serif;
                font-weight: bold;
                margin: 0;
                font-size: 2.55rem; /* Increased font-size by 1.5x */
                letter-spacing: -0.025em;
            }
        </style>
    </head>
    <body>
        <div id="map"></div>

        <!-- Event name box (top left) -->
        <div class="event-container">
            <div class="event-box">
                <p class="event-name"><%= eventName %></p>
                <p class="event-date"><%= eventDate %></p>
            </div>
        </div>

        <!-- User profile (bottom left) -->
        <% if (locals.hasAllQsos) { %>
        <div class="user-container">
            <% if (profilePic) { %>
            <img
                class="profile-pic"
                src="<%= profilePic %>"
                alt="User Profile"
            />
            <% } %>
            <% if (locals.callsign) { %>
            <p class="callsign"><%= callsign %></p>
            <% } %>
        </div>
        <% } %>

        <!-- Website branding (bottom right) -->
        <div class="website-container">
            <img class="logo" src="<%= image %>" alt="vhfesuperiori" />
            <p class="website-text">vhfesuperiori.eu</p>
            <div class="background-box"></div>
        </div>

        <script
            src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""
        ></script>

        <script>
            const qsos = <%- JSON.stringify(qsos) %>;
            const points = <%- JSON.stringify(points) %>;

            const map = L.map("map", { zoomControl: false }).fitBounds(points, {
                animate: false,
                padding: [32, 32]
            });

            L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
                attribution:
                    'Â© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);

            // Track unique markers to avoid duplicates
            const uniqueMarkers = new Map();

            // Create a red icon for from stations with fallback
            let redIcon;
            try {
                redIcon = new L.Icon({
                    iconUrl: '<%= markerAssets.redIcon %>',
                    shadowUrl: '<%= markerAssets.shadowIcon %>',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                    shadowSize: [41, 41]
                });
            } catch (error) {
                console.warn('Failed to create red icon, using default:', error);
                redIcon = new L.Icon.Default();
            }

            qsos.forEach(function (qso) {
                if (
                    qso.fromStationLat &&
                    qso.fromStationLon &&
                    qso.toStationLat &&
                    qso.toStationLon
                ) {
                    // Polyline
                    L.polyline(
                        [
                            [qso.fromStationLat, qso.fromStationLon],
                            [qso.toStationLat, qso.toStationLon]
                        ],
                        { color: "#ef4444", weight: 3, opacity: 0.7 }
                    ).addTo(map);

                    // From Station Marker (only if not already added)
                    const fromKey = `${qso.fromStationLat},${qso.fromStationLon}`;
                    if (!uniqueMarkers.has(fromKey)) {
                        // Create marker with red icon, fallback to default if icon fails
                        let fromMarker;
                        try {
                            fromMarker = L.marker([qso.fromStationLat, qso.fromStationLon], { icon: redIcon });
                        } catch (error) {
                            console.warn('Failed to use red icon, using default marker:', error);
                            fromMarker = L.marker([qso.fromStationLat, qso.fromStationLon]);
                        }
                        
                        fromMarker.bindPopup(
                            "<b>" +
                                (qso.fromStationCallsignOverride ||
                                    qso.fromStation.callsign) +
                                "</b><br>Locator: " +
                                qso.fromLocator
                        ).addTo(map);
                        uniqueMarkers.set(fromKey, true);
                    }

                    // To Station Marker (only if not already added)
                    const toKey = `${qso.toStationLat},${qso.toStationLon}`;
                    if (!uniqueMarkers.has(toKey)) {
                        L.marker([qso.toStationLat, qso.toStationLon])
                            .bindPopup(
                                "<b>" +
                                    qso.callsign +
                                    "</b><br>Locator: " +
                                    qso.toLocator
                            )
                            .addTo(map);
                        uniqueMarkers.set(toKey, true);
                    }
                }
            });
        </script>
    </body>
</html>
